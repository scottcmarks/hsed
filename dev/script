:load dev/DevMain.hs
:set -XQuasiQuotes
:set -XOverloadedStrings
:set prompt-cont ""

import Data.Either(Either(..))
import Data.Foldable(mapM_)
import Data.Functor((<$>))
import Data.Text(cons, snoc, pack, unpack)
import GHC.Arr(range)
import GHC.Base(flip,map,pure,(.),($),(*>),(<*>),(<*),(<>))
import GHC.Classes((<))
import GHC.Show(show)
import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------
import Text.Megaparsec(parse,errorBundlePretty)
import Text.ABNF.ABNF.Parser(parseABNF)
import Text.ABNF.PrettyPrinter(prettyShow)


:{

mapM_ (putStrLn . unpack) [ "coreTypesTCGABNF =" , coreTypesTCGABNF
                          , ""
                          , "correctABNFFromTCGABNF coreTypesTCGABNF =>" , correctABNFFromTCGABNF coreTypesTCGABNF
                          ]
:}

:{
mapM_ putStrLn $ case parseABNF "~/hsed/dev/script FIXME" $ preprocessABNF coreTypesTCGABNF of
  Right rules -> [ "success"
                 , ""
                 , correctABNFToTCGABNF $ prettyShow rules
                 ]
  Left peb -> [ "failed"
              , ""
              , errorBundlePretty peb
              ]
:}

putStrLn "Buh-bye now."

--------------------------------------------------------------------------------

import GHC.Base(const, (++))
:def! $ (pure . (":! bash -l -c " ++) . show)
:def! B (pure . (":! bash -l -c \"stack build\"" ++) . show)
:def! D (pure . const (":set -ddump-splices") )
:def! H (pure . (":! bash -l -c \"./h\"" ++) . show)
:def! P (pure . (":! bash -l -c \"./hp\"" ++) . show)
putStrLn ".. script loaded."
