:set -package hsed
:set prompt-cont ""

:set -XOverloadedStrings

-- :set -XQuasiQuotes
-- :set -XRankNTypes
-- :set -XGADTs
-- :set -XStandaloneDeriving
-- :set -XKindSignatures
-- :set -XMultiParamTypeClasses
-- :set -XFlexibleContexts
-- :set -XDerivingVia
-- :set -XUndecidableInstances

import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------

import Data.ByteString(head,tail)
import Data.Either(Either(..))
import Data.Foldable(mapM_)
import Data.Functor((<$>))
import Data.Maybe(Maybe(..))
import Data.Text(cons, snoc, pack, unpack)
import GHC.Arr(range)
import GHC.Base(flip,map,pure,(.),($),(*>),(<*>),(<*),(<>))
import GHC.Classes((<))
import GHC.Err(undefined)
import GHC.Show(show)
import GHC.Base(const, (++))
:def! $ (pure . (":! bash -l -c " ++) . show)
:def! B (pure . (":! bash -l -c \"stack build\"" ++) . show)
:def! D (pure . const (":set -ddump-splices") )
:def! H (pure . (":! bash -l -c \"./h\"" ++) . show)
:def! P (pure . (":! bash -l -c \"./hp\"" ++) . show)

--------------------------------------------------------------------------------


import Data.Char (toUpper)
import Data.ByteString (ByteString)
import Data.String(IsString(..))
import GHC.Word(Word8)
import Data.ByteString.Internal(c2w)
import Language.Haskell.TH
import Language.Haskell.TH.Quote
import Language.Haskell.TH.Ppr
import Language.Haskell.TH.PprLib
import Data.Either(Either(..))
import Data.String(String)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
:set -XTemplateHaskell
-- :set -ddump-splices
:load src/System/SED/MCTP/Common/ColumnTypes.hs
putStrLn "Running ..."
:{
table65 =
      "\n\
      \\n\
      \\n\
      \                  Table 65 bytes_4\n\
      \    +-----------------------+-------+---------------------+\n\
      \    |UID                    |Name   |Format               |\n\
      \    +-----------------------+-------+---------------------+\n\
      \    |00 00 00 05 00 00 02 38|bytes_4|Simple_Type,         |\n\
      \    |                       |       |bytes,               |\n\
      \    |                       |       |4                    |\n\
      \    +-----------------------+-------+---------------------+\n\
      \\n" :: String
:}
putStrLn table65
runQ $ ppr <$> quoteDec ttype table65

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn "\n\nBuh-bye now."


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn ".. script loaded."
-- :show
-- :show modules
-- :show packages
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
