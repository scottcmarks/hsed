:set -package hsed
:set -Wno-type-defaults
:set prompt-cont ""

:load dev/DevMain.hs
:set -XQuasiQuotes
:set -XOverloadedStrings
:set -XDataKinds
:set -XTemplateHaskell
:set -XRankNTypes
:set -XGADTs
:set -XStandaloneDeriving
:set -XKindSignatures
:set -XMultiParamTypeClasses
:set -XFlexibleContexts
:set -XDerivingVia

import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------

import Data.ByteString(head,tail)
import Data.Either(Either(..))
import Data.Foldable(mapM_)
import Data.Functor((<$>))
import Data.Maybe(Maybe(..))
import Data.Text(cons, snoc, pack, unpack)
import GHC.Arr(range)
import GHC.Base(flip,map,pure,(.),($),(*>),(<*>),(<*),(<>))
import GHC.Classes((<))
import GHC.Err(undefined)
import GHC.Show(show)
import GHC.Base(const, (++))
:def! $ (pure . (":! bash -l -c " ++) . show)
:def! B (pure . (":! bash -l -c \"stack build\"" ++) . show)
:def! D (pure . const (":set -ddump-splices") )
:def! H (pure . (":! bash -l -c \"./h\"" ++) . show)
:def! P (pure . (":! bash -l -c \"./hp\"" ++) . show)

--------------------------------------------------------------------------------


import Data.Char (toUpper)
import Data.ByteString (ByteString)
import Data.String(IsString(..))
import GHC.Word(Word8)
import Data.ByteString.Internal(c2w)
import Language.Haskell.TH
import Language.Haskell.TH.Ppr
import Language.Haskell.TH.PprLib
import Data.Either(Either(..))
import Data.String(String)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

:load /Users/scott/hsed/src/System/SED/MCTP/Common/Base_Type.hs

import Data.BoundedSize

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn "Buh-bye now."


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn ".. script loaded."
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
