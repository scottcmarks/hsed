:load dev/DevMain.hs
:set -fno-warn-type-defaults
:set -fno-warn-unused-imports
:set -XDataKinds
:set -XOverloadedStrings
:set -XTemplateHaskell
:set -XQuasiQuotes

import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------

$( [| putStrLn "This is hsed!" |] )  -- $([|..|]) is a sort of identity


import           Language.Haskell.TH
import           Language.Haskell.TH.Ppr
import           Language.Haskell.TH.PprLib
import           Data.Function((&))
import           Data.Functor((<&>))
import           System.SED.Common.TableUIDs
import           Data.Attoparsec.ByteString
import           GHC.Base((.),(<*),(<*>),(*>),(>>=))
import           GHC.Show(Show(..))

pQ = (ppr <$>) . runQ
hw = [| putStrLn "Hello, world!" |]
pQ hw

$( hw )  -- echoed by -ddump-splices

showQ = (\h -> h & pQ <&> show >>= putStrLn)
hw & showQ

import Text.Heredoc

-- :{
-- table240 = [here|
-- #include "~/hsed/tcg/Table240.txt"
--  |] ::ByteString
-- :}

:{
table50 = [here|

                     Table 50 ACL
    +-----------------------+-----+--------------+
    |UID                    |Name |Format        |
    +-----------------------+-----+--------------+
    |00 00 00 05 00 00 08 02|ACL  |List_Type,    |
    |                       |     |*,            |
    |                       |     |ACE_object_ref|
    +-----------------------+-----+--------------+

|] ::ByteString
:}

t50sep = "    +-----------------------+-----+--------------+\n" ::ByteString
thead  = "    |UID                    |Name |Format        |\n" ::ByteString
trow1  = "    |00 00 00 05 00 00 08 02|ACL  |List_Type,    |\n" ::ByteString
trow2  = "    |                       |     |*,            |\n" ::ByteString
trow3  = "    |                       |     |ACE_object_ref|\n" ::ByteString

lengths = fromRight [] $  parseOnly (skipSpace *> title *> rowSep) table50

putStrLn "Buh-bye now."

--------------------------------------------------------------------------------
import GHC.Base((++))
:def $ (pure . (":! bash -l -c " ++) . show)
:def | (pure . (":! bash -l -c " ++) . show)
putStrLn ".. script loaded."
