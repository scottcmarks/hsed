:set -package hsed
:set prompt-cont ""

:set -XOverloadedStrings

-- :set -XQuasiQuotes
-- :set -XRankNTypes
-- :set -XGADTs
-- :set -XStandaloneDeriving
-- :set -XKindSignatures
-- :set -XMultiParamTypeClasses
-- :set -XFlexibleContexts
-- :set -XDerivingVia
-- :set -XUndecidableInstances

import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------

import Data.ByteString(head,tail)
import Data.Either(Either(..))
import Data.Foldable(mapM_)
import Data.Functor((<$>))
import Data.Maybe(Maybe(..))
import Data.Text(cons, snoc, pack, unpack)
import GHC.Arr(range)
import GHC.Base(flip,map,pure,(.),($),(*>),(<*>),(<*),(<>))
import GHC.Classes((<))
import GHC.Err(undefined)
import GHC.Show(Show(..),showString,shows)
import GHC.Base(const, (++))
:def! $ (pure . (":! bash -l -c " ++) . show)
:def! B (pure . (":! bash -l -c \"stack build\"" ++) . show)
:def! D (pure . const (":set -ddump-splices") )
:def! H (pure . (":! bash -l -c \"./h\"" ++) . show)
:def! P (pure . (":! bash -l -c \"./hp\"" ++) . show)

--------------------------------------------------------------------------------


import Data.Char (toUpper)
import Data.ByteString (ByteString)
import Data.String(IsString(..))
import GHC.Word(Word8)
import Data.ByteString.Internal(c2w)
import Language.Haskell.TH
import Language.Haskell.TH.Quote
import Language.Haskell.TH.Ppr
import Language.Haskell.TH.PprLib
import Data.Either(Either(..))
import Data.String(String)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
:set -XTemplateHaskell
:set -XDataKinds
:load src/System/SED/MCTP/Common/TypeUIDs.hs
import System.SED.MCTP.Common.TypeUIDs.TH
import System.SED.MCTP.Common.THUtil

putStrLn "Running ..."
:{
table65 =
      "\n\
      \\n\
      \\n\
      \                  Table 65 bytes_4\n\
      \    +-----------------------+-------+---------------------+\n\
      \    |UID                    |Name   |Format               |\n\
      \    +-----------------------+-------+---------------------+\n\
      \    |00 00 00 05 00 00 02 38|bytes_4|Simple_Type,         |\n\
      \    |                       |       |bytes,               |\n\
      \    |                       |       |4                    |\n\
      \    +-----------------------+-------+---------------------+\n\
      \\n" :: String
:}
putStrLn table65
parseTable typeTableParser table65
putStrLn "\n"
runQ $ ppr <$> quoteDec ttype table65

:{
table76 =
      "\n\
      \\n\
      \                         Table 76 Column_object_ref\n\
      \    +-----------------------+-----------------+-----------------------------+\n\
      \    |UID                    |Name             |Format                       |\n\
      \    +-----------------------+-----------------+-----------------------------+\n\
      \    |00 00 00 05 00 00 0C 07|Column_object_ref|Restricted_Reference_Type{6},|\n\
      \    |                       |                 |uidref {ColumnTable_UID}     |\n\
      \    +-----------------------+-----------------+-----------------------------+\n\
      \\n" :: String
:}
putStrLn table76
parseTable typeTableParser table76
putStrLn "\n"
runQ $ ppr <$> quoteDec ttype table76



--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
putStrLn "\n\n\n"
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------



putStrLn "Before ':load System.SED.MCTP.Common.TableUIDs'\n"
:load System.SED.MCTP.Common.TableUIDs
putStrLn "\n\n\n"
putStrLn $ showString "hColumn = " . shows hColumn $ ""
putStrLn "\n\n\n"




--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
:load System.SED.MCTP.Common.Types
:set -XTypeOperators
:set -XExplicitNamespaces
import Data.Refined
import qualified GHC.Base as Base(map)
import Data.Tuple(snd)
import GHC.Exts(IsList(..))

Base.map snd $ toList  nameHalfUID



import Data.Set(Set)
import GHC.Base(Int)
import Data.BoundedSize(BoundedSize(..))

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
putStrLn "\n\n\n"
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

:{
othTable :: Object_Table_HalfUID
othTable = unsafeCreate hTable
:}

putStrLn $ showString "othTable = " . shows othTable $ ""


putStrLn "\n\n\nBuh-bye now.\n\n"


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn ".. script loaded."
-- :show
-- :show modules
-- :show packages
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
