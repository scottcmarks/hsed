:set -package hsed
:set prompt-cont ""

:set -XOverloadedStrings

-- :set -XQuasiQuotes
-- :set -XRankNTypes
-- :set -XGADTs
-- :set -XStandaloneDeriving
-- :set -XKindSignatures
-- :set -XMultiParamTypeClasses
-- :set -XFlexibleContexts
-- :set -XDerivingVia
-- :set -XUndecidableInstances

import System.IO
putStrLn "loading script ..."
--------------------------------------------------------------------------------

-- import Data.ByteString(head,tail)
-- import Data.Either(Either(..))
-- import Data.Foldable(mapM_)
-- import Data.Functor((<$>))
-- import Data.Maybe(Maybe(..))
-- import Data.Text(cons, snoc, pack, unpack)
-- import GHC.Arr(range)
-- import GHC.Base(flip,map,pure,(.),($),(*>),(<*>),(<*),(<>))
-- import GHC.Classes((<))
-- import GHC.Err(undefined)
-- import GHC.Show(show)
-- import GHC.Base(const, (++))
:def! $ (pure . (":! bash -l -c " ++) . show)
:def! B (pure . (":! bash -l -c \"stack build\"" ++) . show)
:def! D (pure . const (":set -ddump-splices") )
:def! H (pure . (":! bash -l -c \"./h\"" ++) . show)
:def! P (pure . (":! bash -l -c \"./hp\"" ++) . show)

--------------------------------------------------------------------------------


-- import Data.Char (toUpper)
-- import Data.ByteString (ByteString)
-- import Data.String(IsString(..))
-- import GHC.Word(Word8)
-- import Data.ByteString.Internal(c2w)
-- import Language.Haskell.TH
-- import Language.Haskell.TH.Ppr
-- import Language.Haskell.TH.PprLib
-- import Data.Either(Either(..))
-- import Data.String(String)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
:load src/System/SED/MCTP/Common/Simple_Type.hs
import Data.BoundedSize
import System.SED.MCTP.Common.Base_Type.TH
:set -XTemplateHaskell
:set -XDataKinds
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn "Buh-bye now."


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

putStrLn ".. script loaded."
:show
:show modules
:show packages
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
