 complement (7::Word8)
248
 Data.ByteString.pack$[0..255]
"\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\t\n\v\f\r\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SYN\ETB\CAN\EM\SUB\ESC\FS\GS\RS\US !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\DEL\128\129\130\131\132\133\134\135\136\137\138\139\140\141\142\143\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159\160\161\162\163\164\165\166\167\168\169\170\171\172\173\174\175\176\177\178\179\180\181\182\183\184\185\186\187\188\189\190\191\192\193\194\195\196\197\198\199\200\201\202\203\204\205\206\207\208\209\210\211\212\213\214\215\216\217\218\219\220\221\222\223\224\225\226\227\228\229\230\231\232\233\234\235\236\237\238\239\240\241\242\243\244\245\246\247\248\249\250\251\252\253\254\255"
 bnds=(0,255)
 import Data.Ix
 range bnds
[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]
 :load src/Types.lhs
 testn n = (byteStringToNatural . naturalToByteString) n == n
 :t testn
testn :: Natural -> Bool
 failn = not.testn
 testi i = (byteStringToInteger . integerToByteString) i == i
 testi i = (byteStringToInteger . integerToByteString) i == i
 faili = not.testi
 :t Data.List.find
Data.List.find :: Foldable t => (a -> Bool) -> t a -> Maybe a
 :t Data.List.find failn
Data.List.find failn :: Foldable t => t Natural -> Maybe Natural
 :t Data.List.find failn [0..1000000]
Data.List.find failn [0..1000000] :: Maybe Natural
  Data.List.find failn [0..1000000]
Nothing
  Data.List.find faili [-1000000..1000000]
Nothing
 UnsignedAtom(2)
UnsignedAtom {_fromNatural = 2}
 generateToken it
"\STX"
 parse parseToken it
Done "" (UnsignedAtom {_fromNatural = 2})
 parseOnly parseToken $ generateToken $ UnsignedAtom 2
Right (UnsignedAtom {_fromNatural = 2})
 parseTest parseToken $ generateToken $ UnsignedAtom 2
Done "" (UnsignedAtom {_fromNatural = 2})
 parseTest parseToken $ generateToken $ UnsignedAtom 3754
Done "" (UnsignedAtom {_fromNatural = 3754})
 parseTest parseToken $ generateToken $ SignedAtom 3754
Partial _
  SignedAtom 3754
SignedAtom {_fromInteger = 3754}
  generateToken $ SignedAtom 3754
"\146\SO\170"
 bs = it
 B.head bs
146
92 printf "%02X" $ B.head bs
92 printf "%02X\n" $ B.head bs
92
 printf "0x%02X\n" $ B.head bs
0x92
 R.map (printf "%02X") bs
 B.unpack bs
[146,14,170]
 hex=fromString . (printf "%02X" :: Word8-> String).Data.List.head.(B.unpack::ByteString ->[Word8])
 :t hex
 :i Token
 UnsignedAtom 0
UnsignedAtom {_fromNatural = 0}
 generateToken it
"\NUL"
 it
"\NUL"
 Data.ByteString.head it
0
 SignedAtom 0
SignedAtom {_fromInteger = 0}
 generateToken it
"@"
 Data.ByteString.head it
64
 Data.ByteString.singleton 96
"`"
 parseTest parseToken it
Done "" (SignedAtom {_fromInteger = 224})
 generateToken $ SignedAtom 224
"\146\NUL\224"
 generateToken $ SignedAtom 32
"\145 "
 generateToken $ SignedAtom 0
"@"
 generateToken $ SignedAtom 31
"_"
 Data.ByteString.head it
95
 import qualified Data.ByteString as B
 B.head $ generateToken $ SignedAtom 31
95
 B.head $ generateToken $ UnsignedAtom 31
31
  [ byte n == (B.head $ generateToken $ UnsignedAtom n) | n <- [0..63] ]
[True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True]
 DL.foldl (&&) True [ byte n == (B.head $ generateToken $ UnsignedAtom n) | n <- [0..63] ]
True
 DL.foldl1 (&&) [ byte n == (B.head $ generateToken $ UnsignedAtom n) | n <- [0..63] ]
True
 DL.foldl1 (&&) [ byte n == (B.head $ generateToken $ UnsignedAtom n) | n <- [0..31] ]
True
 DL.foldl1 (&&) [ byte i == (B.head $ generateToken $ SignedAtom i) | i <- [-32..31] ]
False
 SignedAtom 0
SignedAtom {_fromInteger = 0}
 SignedAtom -32

import Types
and [ (Right $ SignedAtom i) == (parseOnly parseToken $ generateToken $ SignedAtom i) | i <- [-32..31] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..63] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..64] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..257] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..0x10000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..0x1000000] ]
  C-c C-cInterrupted.
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..0x10000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0..0x100000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x100000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x1000000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x10000000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x1000000000000] ]
True
 and [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x100000000000000000000000000000000000000000000000000000] ]
True
 and $ DL.take 5 [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x100000000000000000000000000000000000000000000000000000..] ]
True
 and $ DL.take 5000 [ (Right $ UnsignedAtom n) == (parseOnly parseToken $ generateToken $ UnsignedAtom n) | n <- [0x100000000000000000000000000000000000000000000000000000..] ]
True
 and $ DL.take 5000 [ (Right $ SignedAtom n) == (parseOnly parseToken $ generateToken $ SignedAtom n) | n <- [0x100000000000000000000000000000000000000000000000000000..] ]
True
 and $ DL.take 5000 [ (Right $ SignedAtom (- n)) == (parseOnly parseToken $ generateToken $ SignedAtom (- n)) | n <- [0x100000000000000000000000000000000000000000000000000000..] ]
True
